#KARAGIANNIS GEORGIOS 3190074

	.text
	.globl main

main:
	# print welcome message
	la $a0, welcome_message
	li $v0, 4
	syscall

	# read the codeword
	la $t0, CodeWord
	li $s0, 0

loop:
	lw $t1,c12	#check
	bge $s0,$t1,control
	li $v0, 12
	syscall

	addi $t2,$v0,-48
	sb $t2, ($t0)
	addi $t0,$t0,1
	addi $s0,$s0,1
	
	j loop

control:
	li $s0,1
	la $t0,CodeWord

	lw $s7,c4	#check
while:
	bgt $s0,$s7,results
	li $s1,0	

	lw $s6,c1	#check
	bne $s0,$s6,one
	la $t1,PotitionsForDigit1
one:
	lw $s6,c2	#check
	bne $s0,$s6,two
	la $t1,PotitionsForDigit2
two:
	lw $s6,c3	#check
	bne $s0,$s6,three
	la $t1,PotitionsForDigit4
three:
	lw $s6,c4	#check
	bne $s0,$s6,loop_2
	la $t1,PotitionsForDigit8

loop_2:
	#sum calculation
	lb $t2,($t1)
	lw $s5,c_minus	#check
	beq $t2,$s5,exit_loop
	add $t2,$t2,$t0
	addi $t2,$t2,-1
	lb $t3,($t2)
	add $s1,$s1,$t3
	addi $t1,$t1,1
	j loop_2
	
exit_loop:
	lw $s4,c2	#check
	rem $t4,$s1,$s4
	lw $s4,c0	#check
	bne $t4,$s4,not_ok	
	addi $s0,$s0,1
	
	j while

results:
	la $a0,ok_message
	li $v0,4
	syscall		
	
	j exit

not_ok:
	la $a0,not_ok_message
	li $v0,4
	syscall
exit:
	li $v0,	10
	syscall

	.data
CodeWord:		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

c0:	.word 0
c1:	.word 1
c2:	.word 2
c3:	.word 3
c4:	.word 4
c12:	.word 12
c_minus:	.word -1


PotitionsForDigit1: 	.byte 1, 3, 5, 7, 9, 11, -1

PotitionsForDigit2: 	.byte 2, 3, 6, 7, 10, 11, -1

PotitionsForDigit4: 	.byte 4, 5, 6, 7, 12, -1

PotitionsForDigit8: 	.byte 8, 9, 10, 11, 12, -1

welcome_message:	.asciiz "\n - Input a 12 digit binary sequence "

not_ok_message:		.asciiz "\n - Error in CodeWord"

ok_message:		.asciiz "\n - No error in CodeWord"
